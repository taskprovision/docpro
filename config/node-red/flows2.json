[
    {
        "id": "doc-processing-tab",
        "type": "tab",
        "label": "Document Processing Pipeline",
        "disabled": false,
        "info": "Complete document processing workflow with AI analysis"
    },
    {
        "id": "file-watcher",
        "type": "watch",
        "z": "doc-processing-tab",
        "name": "Watch Input Folder",
        "files": "/input",
        "recursive": true,
        "x": 140,
        "y": 100,
        "wires": [["file-filter"]]
    },
    {
        "id": "file-filter",
        "type": "switch",
        "z": "doc-processing-tab",
        "name": "Filter Documents",
        "property": "filename",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "\\.(pdf|docx|doc|png|jpg|jpeg|tiff|txt)$",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 360,
        "y": 100,
        "wires": [["read-file"]]
    },
    {
        "id": "read-file",
        "type": "file in",
        "z": "doc-processing-tab",
        "name": "Read Document",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 560,
        "y": 100,
        "wires": [["classify-document"]]
    },
    {
        "id": "classify-document",
        "type": "function",
        "z": "doc-processing-tab",
        "name": "Classify Document Type",
        "func": "const filename = msg.filename.toLowerCase();\nconst payload = msg.payload;\n\n// Determine document type based on filename\nlet docType = 'UNKNOWN';\nif (filename.includes('cor') || filename.includes('certificate')) {\n    docType = 'COR';\n} else if (filename.includes('invoice') || filename.includes('faktura')) {\n    docType = 'INVOICE';\n} else if (filename.includes('contract') || filename.includes('umowa')) {\n    docType = 'CONTRACT';\n} else if (filename.includes('test')) {\n    docType = 'TEST';\n}\n\nmsg.documentType = docType;\nmsg.originalFilename = msg.filename;\nmsg.fileSize = payload.length;\nmsg.processingStartTime = Date.now();\n\n// Log processing start\nnode.log(`Processing ${docType} document: ${msg.filename} (${msg.fileSize} bytes)`);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 100,
        "wires": [["extract-text"]]
    },
    {
        "id": "extract-text",
        "type": "http request",
        "z": "doc-processing-tab",
        "name": "Extract Text (Tika)",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://tika:9998/tika",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/octet-stream"
            }
        ],
        "x": 220,
        "y": 200,
        "wires": [["analyze-with-llm"]]
    },
    {
        "id": "analyze-with-llm",
        "type": "function",
        "z": "doc-processing-tab",
        "name": "Prepare LLM Analysis",
        "func": "const extractedText = msg.payload;\nconst docType = msg.documentType;\n\n// Store extracted text\nmsg.extractedText = extractedText;\n\n// Prepare analysis prompt based on document type\nlet prompt = '';\nswitch(docType) {\n    case 'COR':\n        prompt = `Analyze this Certificate of Conformity document. Extract key information:\\n\\n${extractedText}\\n\\nReturn JSON:\\n{\\n  \"certificate_number\": \"\",\\n  \"issuing_authority\": \"\",\\n  \"product_name\": \"\",\\n  \"compliance_status\": \"COMPLIANT|NON_COMPLIANT|UNCLEAR\",\\n  \"validity_start\": \"\",\\n  \"validity_end\": \"\",\\n  \"issues_found\": [],\\n  \"confidence_score\": 0.95\\n}`;\n        break;\n    case 'INVOICE':\n        prompt = `Extract invoice data:\\n\\n${extractedText}\\n\\nReturn JSON:\\n{\\n  \"invoice_number\": \"\",\\n  \"date\": \"\",\\n  \"supplier_name\": \"\",\\n  \"total_amount\": 0.0,\\n  \"currency\": \"\",\\n  \"due_date\": \"\",\\n  \"validation_status\": \"VALID|INVALID\",\\n  \"confidence_score\": 0.95\\n}`;\n        break;\n    case 'CONTRACT':\n        prompt = `Analyze contract for risks:\\n\\n${extractedText}\\n\\nReturn JSON:\\n{\\n  \"contract_type\": \"\",\\n  \"parties\": [],\\n  \"risk_level\": \"LOW|MEDIUM|HIGH\",\\n  \"key_terms\": [],\\n  \"risk_factors\": [],\\n  \"confidence_score\": 0.95\\n}`;\n        break;\n    case 'TEST':\n        prompt = `This is a test document. Analyze the content:\\n\\n${extractedText}\\n\\nReturn JSON:\\n{\\n  \"document_type\": \"TEST\",\\n  \"content_summary\": \"\",\\n  \"word_count\": 0,\\n  \"confidence_score\": 0.95\\n}`;\n        break;\n    default:\n        prompt = `Categorize this document:\\n\\n${extractedText}\\n\\nReturn JSON:\\n{\\n  \"category\": \"\",\\n  \"summary\": \"\",\\n  \"confidence_score\": 0.95\\n}`;\n}\n\n// Check if Ollama is available, otherwise skip AI analysis\nif (extractedText.length < 10) {\n    msg.analysis = {\n        category: 'EMPTY',\n        summary: 'Document appears to be empty or text extraction failed',\n        confidence_score: 0.1\n    };\n    msg.skipLLM = true;\n} else {\n    msg.payload = {\n        \"model\": \"llama2:7b\",\n        \"prompt\": prompt,\n        \"stream\": false\n    };\n    msg.skipLLM = false;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 200,
        "wires": [["llm-check"]]
    },
    {
        "id": "llm-check",
        "type": "switch",
        "z": "doc-processing-tab",
        "name": "LLM Available?",
        "property": "skipLLM",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 200,
        "wires": [
            ["call-ollama"],
            ["parse-analysis"]
        ]
    },
    {
        "id": "call-ollama",
        "type": "http request",
        "z": "doc-processing-tab",
        "name": "LLM Analysis",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://ollama:11434/api/generate",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 880,
        "y": 180,
        "wires": [["parse-analysis"]]
    },
    {
        "id": "parse-analysis",
        "type": "function",
        "z": "doc-processing-tab",
        "name": "Parse Analysis Results",
        "func": "try {\n    let analysis = {};\n    \n    if (msg.skipLLM) {\n        // Use pre-set analysis for skipped LLM\n        analysis = msg.analysis;\n    } else {\n        const llmResponse = msg.payload;\n        \n        // Try to parse JSON from LLM response\n        if (llmResponse && llmResponse.response) {\n            // Look for JSON in the response\n            const jsonMatch = llmResponse.response.match(/\\{[\\s\\S]*\\}/);\n            if (jsonMatch) {\n                try {\n                    analysis = JSON.parse(jsonMatch[0]);\n                } catch (e) {\n                    // If JSON parsing fails, create fallback\n                    analysis = {\n                        category: 'PARSED_ERROR',\n                        summary: 'LLM response could not be parsed as JSON',\n                        confidence_score: 0.3,\n                        raw_response: llmResponse.response.substring(0, 200)\n                    };\n                }\n            } else {\n                // No JSON found in response\n                analysis = {\n                    category: 'NO_JSON',\n                    summary: 'LLM response did not contain JSON',\n                    confidence_score: 0.2,\n                    raw_response: llmResponse.response ? llmResponse.response.substring(0, 200) : 'No response'\n                };\n            }\n        } else {\n            // No LLM response\n            analysis = {\n                category: 'LLM_ERROR',\n                summary: 'No response from LLM service',\n                confidence_score: 0.1\n            };\n        }\n    }\n    \n    msg.analysis = analysis;\n    msg.processingTime = Date.now() - msg.processingStartTime;\n    \n    // Log analysis result\n    node.log(`Analysis complete for ${msg.documentType}: ${analysis.category || analysis.document_type || 'unknown'}`);\n    \n    return msg;\n    \n} catch (error) {\n    msg.error = error.message;\n    msg.analysis = {\n        category: 'ERROR',\n        confidence_score: 0.0,\n        summary: 'Analysis failed: ' + error.message\n    };\n    msg.processingTime = Date.now() - msg.processingStartTime;\n    \n    node.error(`Analysis error: ${error.message}`);\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",\n        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 200,
        "wires": [["check-alerts"]]
    },
    {
        "id": "check-alerts",
        "type": "switch",
        "z": "doc-processing-tab",
        "name": "Check for Alerts",
        "property": "analysis",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata",
                "v": "analysis.compliance_status = \"NON_COMPLIANT\"",
                "vt": "jsonata"
            },
            {
                "t": "jsonata",
                "v": "analysis.total_amount > 10000",
                "vt": "jsonata"
            },
            {
                "t": "jsonata",
                "v": "analysis.risk_level = \"HIGH\"",
                "vt": "jsonata"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 1340,
        "y": 200,
        "wires": [
            ["compliance-alert"],
            ["high-value-alert"],
            ["risk-alert"]
        ]
    },
    {
        "id": "compliance-alert",
        "type": "function",
        "z": "doc-processing-tab",
        "name": "Compliance Alert",
        "func": "msg.alert = {\n    type: 'COMPLIANCE_ISSUE',\n    severity: 'HIGH',\n    document: msg.originalFilename,\n    message: 'Compliance issues detected',\n    timestamp: new Date().toISOString()\n};\n\nnode.warn(`Compliance alert for ${msg.originalFilename}`);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 300,
        "wires": [["store-alert"]]
    },
    {
        "id": "high-value-alert",
        "type": "function",
        "z": "doc-processing-tab",
        "name": "High Value Alert",
        "func": "msg.alert = {\n    type: 'HIGH_VALUE_INVOICE',\n    severity: 'MEDIUM',\n    document: msg.originalFilename,\n    message: 'High-value invoice requires approval',\n    timestamp: new Date().toISOString()\n};\n\nnode.warn(`High value alert for ${msg.originalFilename}`);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 300,
        "wires": [["store-alert"]]
    },
    {
        "id": "risk-alert",
        "type": "function",
        "z": "doc-processing-tab",
        "name": "Risk Alert",
        "func": "msg.alert = {\n    type: 'CONTRACT_RISK',\n    severity: 'HIGH',\n    document: msg.originalFilename,\n    message: 'High-risk contract detected',\n    timestamp: new Date().toISOString()\n};\n\nnode.warn(`Risk alert for ${msg.originalFilename}`);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 300,
        "wires": [["store-alert"]]
    },
    {
        "id": "store-alert",
        "type": "http request",
        "z": "doc-processing-tab",
        "name": "Store Alert in Elasticsearch",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://elasticsearch:9200/compliance-alerts/_doc",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 800,
        "y": 300,
        "wires": [["store-document"]]
    },
    {
        "id": "store-document",
        "type": "function",
        "z": "doc-processing-tab",
        "name": "Prepare Document for Storage",
        "func": "// Prepare document for Elasticsearch storage\nconst docForStorage = {\n    filename: msg.originalFilename,\n    document_type: msg.documentType,\n    processing_timestamp: new Date().toISOString(),\n    extracted_text: msg.extractedText ? msg.extractedText.substring(0, 5000) : '', // Limit text length\n    analysis_results: msg.analysis,\n    file_size: msg.fileSize,\n    processing_time_ms: msg.processingTime,\n    alert: msg.alert || null\n};\n\nmsg.payload = docForStorage;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 300,
        "wires": [["store-in-elasticsearch"]]
    },
    {
        "id": "store-in-elasticsearch",
        "type": "http request",
        "z": "doc-processing-tab",
        "name": "Store in Elasticsearch",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://elasticsearch:9200/documents/_doc",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 1320,
        "y": 300,
        "wires": [["processing-complete"]]
    },
    {
        "id": "processing-complete",
        "type": "debug",
        "z": "doc-processing-tab",
        "name": "Processing Complete",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 160,
        "y": 400,
        "wires": []
    },
    {
        "id": "test-inject",
        "type": "inject",
        "z": "doc-processing-tab",
        "name": "Test Processing",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "filename",
                "v": "test-document.txt",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "This is a test document for the DocPro processing pipeline. It contains sample text to verify that the system is working correctly.",
        "payloadType": "str",
        "x": 140,
        "y": 500,
        "wires": [["classify-document"]]
    }
]